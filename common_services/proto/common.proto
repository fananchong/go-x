syntax = "proto3";

package proto;

enum MsgTypeCmd {
    UNSPECIFIED = 0;
    Login = 1;              // 登录(C->S)
    Verify = 2;             // 验证令牌(C->S)
    VerifyS = 3;            // 验证令牌(S->S)
    Kick = 4;               // 踢人(S->S)
    VerifySuccess = 5;      // 验证结果(S->C)
    Forward = 6;            // 转发(S->S)，客户端与具体服务器，通过 Gateway 通信
    ForwardS = 7;           // 转发(S->S)
    COMMON_CMD_END = 99;    // 公共协议号范围
};


/// Login (C->S)
enum LoginMode {
    Default = 0;            // 缺省登录（本地数据库保存帐号密码。首次登录，没有帐号密码时，直接插入本地数据库）
    CUSTOM_BEGIN = 100;     // go-x common层以外的第3方平台登录
}

message EnumLogin
{
    enum Error {
        NoErr = 0;
        ErrPassword = 1;        // 密码错误
        ErrAccount = 2;         // 帐号错误
        ErrPlatformSide = 3;    // 平台方错误
        ErrMode = 4;            // Mode错误
        ErrDB = 5;              // 数据库错误
        ErrGateway = 6;         // 找不到Gateway
        ErrParams = 7;          // 参数错误
    }
}

message MsgLogin
{
    string Account = 1;     // 帐号
    string Password = 2;    // 密码
    LoginMode Mode = 3;     // 登录模式
    bytes Userdata = 4;     // 不同登录模式，可能需要携带自定义数据
}

message MsgLoginResult
{
    EnumLogin.Error Err = 1;     // 0:登录成功；非0:错误号
    string Token = 2;       // 令牌
    string Address = 3;     // Gateway IP、PORT(格式 ip:port)
}


/// Verify (C->S)
message MsgVerify
{
    string Account = 1;     // 帐号
    string Token = 2;       // 令牌
}

/// VerifyS (S->S)
message MsgVerifyS
{
    uint32 Id = 1;          // 服务器ID
    string Token = 2;       // 令牌
}

/// KickPlayer (S->S)
message MsgKick
{
    uint64 UID = 1;         // 帐号ID
}

/// VerifySuccess (S->C)
message MsgVerifySuccess
{
}

/// ForwardC (S->S)
message MsgForward
{
    uint64 UID = 1;         // 帐号ID
    bytes Data = 2;         // 数据
    int32 Flag = 3;         // 数据Flag标志
}

/// ForwardS (S->S)
///    若Type为0且Id不为空:投递给该Id服务器
///    若Type为1且Id不为空:投递给某Type所有服务器（除了该Id服务器外）
///    若Type为1且Id为空，则投递给某Type的一个服务器
message MsgForwardS
{
    uint32 Type = 1;         // 类型
    uint32 Id = 2;           // 服务器ID
    bytes Data = 3;          // 数据
    int32 Flag = 4;          // 数据Flag标志
}

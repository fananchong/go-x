/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"
	"fmt"
	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

type Role struct {
	Key  uint64
	name string
	sex  uint8

	__dirtyData map[string]interface{}
	__isLoad    bool
	__dbKey     string
	__dbName    string
	__expire    uint
}

func NewRole(dbName string, key uint64) *Role {
	return &Role{
		Key:         key,
		__dbName:    dbName,
		__dbKey:     "Role:" + fmt.Sprintf("%d", key),
		__dirtyData: make(map[string]interface{}),
	}
}

// 若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (this *Role) HasKey() (int, error) {
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Int(db.Do("EXISTS", this.__dbKey))
	if err != nil {
		return -1, err
	}
	return val, nil
}

func (this *Role) Load() error {
	if this.__isLoad == true {
		return errors.New("alreay load!")
	}
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Values(db.Do("HGETALL", this.__dbKey))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Name string `redis:"name"`
		Sex  uint8  `redis:"sex"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	this.name = data.Name
	this.sex = data.Sex
	this.__isLoad = true
	return nil
}

func (this *Role) Save() error {
	if len(this.__dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(this.__dbName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(this.__dirtyData)...); err != nil {
		return err
	}
	if this.__expire != 0 {
		if _, err := db.Do("EXPIRE", this.__dbKey, this.__expire); err != nil {
			return err
		}
	}
	this.__dirtyData = make(map[string]interface{})
	return nil
}

func (this *Role) Delete() error {
	db := go_redis_orm.GetDB(this.__dbName)
	_, err := db.Do("DEL", this.__dbKey)
	if err == nil {
		this.__isLoad = false
		this.__dirtyData = make(map[string]interface{})
	}
	return err
}

func (this *Role) IsLoad() bool {
	return this.__isLoad
}

func (this *Role) Expire(v uint) {
	this.__expire = v
}

func (this *Role) GetName() string {
	return this.name
}

func (this *Role) GetSex() uint8 {
	return this.sex
}

func (this *Role) SetName(value string) {
	this.name = value
	this.__dirtyData["name"] = value
}

func (this *Role) SetSex(value uint8) {
	this.sex = value
	this.__dirtyData["sex"] = value
}
